
SPI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000425c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800442c  0800442c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004434  08004434  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800443c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08004448  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004448  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e468  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ee1  00000000  00000000  0002e4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  000303c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000988  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bd5  00000000  00000000  00031990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f93e  00000000  00000000  00056565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6c58  00000000  00000000  00065ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003278  00000000  00000000  0014cafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014fd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043cc 	.word	0x080043cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080043cc 	.word	0x080043cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb36 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f809 	bl	80004e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8ee 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f8c6 	bl	8000664 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f894 	bl	8000604 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004dc:	f000 f852 	bl	8000584 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x1c>

080004e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b096      	sub	sp, #88	; 0x58
 80004e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2244      	movs	r2, #68	; 0x44
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 ff3e 	bl	8004372 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000504:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000508:	f001 ff06 	bl	8002318 <HAL_PWREx_ControlVoltageScaling>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000512:	f000 f933 	bl	800077c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000516:	2302      	movs	r3, #2
 8000518:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000520:	2310      	movs	r3, #16
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2302      	movs	r3, #2
 8000526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000528:	2302      	movs	r3, #2
 800052a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000530:	230a      	movs	r3, #10
 8000532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000534:	2307      	movs	r3, #7
 8000536:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000538:	2302      	movs	r3, #2
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053c:	2302      	movs	r3, #2
 800053e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4618      	mov	r0, r3
 8000546:	f001 ff3d 	bl	80023c4 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000550:	f000 f914 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	2303      	movs	r3, #3
 800055a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2104      	movs	r1, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fb05 	bl	8002b7c <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000578:	f000 f900 	bl	800077c <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3758      	adds	r7, #88	; 0x58
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_I2C1_Init+0x74>)
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_I2C1_Init+0x78>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <MX_I2C1_Init+0x7c>)
 8000592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_I2C1_Init+0x74>)
 800059c:	2201      	movs	r2, #1
 800059e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005c0:	f000 ffc0 	bl	8001544 <HAL_I2C_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ca:	f000 f8d7 	bl	800077c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005d2:	f001 fdfc 	bl	80021ce <HAL_I2CEx_ConfigAnalogFilter>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005dc:	f000 f8ce 	bl	800077c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005e4:	f001 fe3e 	bl	8002264 <HAL_I2CEx_ConfigDigitalFilter>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f000 f8c5 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028
 80005fc:	40005400 	.word	0x40005400
 8000600:	10909cec 	.word	0x10909cec

08000604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_USART2_UART_Init+0x58>)
 800060a:	4a15      	ldr	r2, [pc, #84]	; (8000660 <MX_USART2_UART_Init+0x5c>)
 800060c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_USART2_UART_Init+0x58>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART2_UART_Init+0x58>)
 8000648:	f003 f978 	bl	800393c <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000652:	f000 f893 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000010c 	.word	0x2000010c
 8000660:	40004400 	.word	0x40004400

08000664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_DMA_Init+0x48>)
 800066c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_DMA_Init+0x48>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6493      	str	r3, [r2, #72]	; 0x48
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_DMA_Init+0x48>)
 8000678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2010      	movs	r0, #16
 8000688:	f000 fbad 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800068c:	2010      	movs	r0, #16
 800068e:	f000 fbc6 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2011      	movs	r0, #17
 8000698:	f000 fba5 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800069c:	2011      	movs	r0, #17
 800069e:	f000 fbbe 	bl	8000e1e <HAL_NVIC_EnableIRQ>

}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a24      	ldr	r2, [pc, #144]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_GPIO_Init+0xc4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2120      	movs	r1, #32
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f000 fef1 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000738:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <MX_GPIO_Init+0xc8>)
 800074a:	f000 fd39 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074e:	2320      	movs	r3, #32
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f000 fd2a 	bl	80011c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	48000800 	.word	0x48000800

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6613      	str	r3, [r2, #96]	; 0x60
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6593      	str	r3, [r2, #88]	; 0x58
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0ac      	sub	sp, #176	; 0xb0
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2288      	movs	r2, #136	; 0x88
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fdbe 	bl	8004372 <memset>
  if(hi2c->Instance==I2C1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a53      	ldr	r2, [pc, #332]	; (8000948 <HAL_I2C_MspInit+0x178>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	f040 809e 	bne.w	800093e <HAL_I2C_MspInit+0x16e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000806:	2300      	movs	r3, #0
 8000808:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fbd8 	bl	8002fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800081a:	f7ff ffaf 	bl	800077c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b4b      	ldr	r3, [pc, #300]	; (800094c <HAL_I2C_MspInit+0x17c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a4a      	ldr	r2, [pc, #296]	; (800094c <HAL_I2C_MspInit+0x17c>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b48      	ldr	r3, [pc, #288]	; (800094c <HAL_I2C_MspInit+0x17c>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000836:	f44f 7340 	mov.w	r3, #768	; 0x300
 800083a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000844:	2301      	movs	r3, #1
 8000846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000850:	2304      	movs	r3, #4
 8000852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800085a:	4619      	mov	r1, r3
 800085c:	483c      	ldr	r0, [pc, #240]	; (8000950 <HAL_I2C_MspInit+0x180>)
 800085e:	f000 fcaf 	bl	80011c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <HAL_I2C_MspInit+0x17c>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	4a39      	ldr	r2, [pc, #228]	; (800094c <HAL_I2C_MspInit+0x17c>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086c:	6593      	str	r3, [r2, #88]	; 0x58
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <HAL_I2C_MspInit+0x17c>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800087a:	4b36      	ldr	r3, [pc, #216]	; (8000954 <HAL_I2C_MspInit+0x184>)
 800087c:	4a36      	ldr	r2, [pc, #216]	; (8000958 <HAL_I2C_MspInit+0x188>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000880:	4b34      	ldr	r3, [pc, #208]	; (8000954 <HAL_I2C_MspInit+0x184>)
 8000882:	2203      	movs	r2, #3
 8000884:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000886:	4b33      	ldr	r3, [pc, #204]	; (8000954 <HAL_I2C_MspInit+0x184>)
 8000888:	2210      	movs	r2, #16
 800088a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b31      	ldr	r3, [pc, #196]	; (8000954 <HAL_I2C_MspInit+0x184>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <HAL_I2C_MspInit+0x184>)
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000898:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <HAL_I2C_MspInit+0x184>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800089e:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <HAL_I2C_MspInit+0x184>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80008a4:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <HAL_I2C_MspInit+0x184>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <HAL_I2C_MspInit+0x184>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80008b0:	4828      	ldr	r0, [pc, #160]	; (8000954 <HAL_I2C_MspInit+0x184>)
 80008b2:	f000 facf 	bl	8000e54 <HAL_DMA_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 80008bc:	f7ff ff5e 	bl	800077c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a24      	ldr	r2, [pc, #144]	; (8000954 <HAL_I2C_MspInit+0x184>)
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
 80008c6:	4a23      	ldr	r2, [pc, #140]	; (8000954 <HAL_I2C_MspInit+0x184>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008ce:	4a24      	ldr	r2, [pc, #144]	; (8000960 <HAL_I2C_MspInit+0x190>)
 80008d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008d4:	2203      	movs	r2, #3
 80008d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <HAL_I2C_MspInit+0x18c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000902:	4816      	ldr	r0, [pc, #88]	; (800095c <HAL_I2C_MspInit+0x18c>)
 8000904:	f000 faa6 	bl	8000e54 <HAL_DMA_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_I2C_MspInit+0x142>
    {
      Error_Handler();
 800090e:	f7ff ff35 	bl	800077c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_I2C_MspInit+0x18c>)
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_I2C_MspInit+0x18c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	201f      	movs	r0, #31
 8000924:	f000 fa5f 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000928:	201f      	movs	r0, #31
 800092a:	f000 fa78 	bl	8000e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2020      	movs	r0, #32
 8000934:	f000 fa57 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000938:	2020      	movs	r0, #32
 800093a:	f000 fa70 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	37b0      	adds	r7, #176	; 0xb0
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40005400 	.word	0x40005400
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400
 8000954:	2000007c 	.word	0x2000007c
 8000958:	4002006c 	.word	0x4002006c
 800095c:	200000c4 	.word	0x200000c4
 8000960:	40020080 	.word	0x40020080

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0ac      	sub	sp, #176	; 0xb0
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2288      	movs	r2, #136	; 0x88
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fcf4 	bl	8004372 <memset>
  if(huart->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <HAL_UART_MspInit+0xb0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d13b      	bne.n	8000a0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000998:	2300      	movs	r3, #0
 800099a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 fb0f 	bl	8002fc4 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ac:	f7ff fee6 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_UART_MspInit+0xb4>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <HAL_UART_MspInit+0xb4>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ba:	6593      	str	r3, [r2, #88]	; 0x58
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <HAL_UART_MspInit+0xb4>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_UART_MspInit+0xb4>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <HAL_UART_MspInit+0xb4>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_UART_MspInit+0xb4>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e0:	230c      	movs	r3, #12
 80009e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f8:	2307      	movs	r3, #7
 80009fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f000 fbda 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	37b0      	adds	r7, #176	; 0xb0
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40021000 	.word	0x40021000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 f8c2 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <DMA1_Channel6_IRQHandler+0x10>)
 8000a76:	f000 fae6 	bl	8001046 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000007c 	.word	0x2000007c

08000a84 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <DMA1_Channel7_IRQHandler+0x10>)
 8000a8a:	f000 fadc 	bl	8001046 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000c4 	.word	0x200000c4

08000a98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <I2C1_EV_IRQHandler+0x10>)
 8000a9e:	f000 fdec 	bl	800167a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000028 	.word	0x20000028

08000aac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <I2C1_ER_IRQHandler+0x10>)
 8000ab2:	f000 fdfc 	bl	80016ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000028 	.word	0x20000028

08000ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f003 fc37 	bl	8004384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fcd5 	bl	80004c4 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b28:	0800443c 	.word	0x0800443c
  ldr r2, =_sbss
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b30:	20000198 	.word	0x20000198

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_Init+0x3c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_Init+0x3c>)
 8000b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f93e 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f80f 	bl	8000b78 <HAL_InitTick>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	e001      	b.n	8000b6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b66:	f7ff fe0f 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d023      	beq.n	8000bd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_InitTick+0x70>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f949 	bl	8000e3a <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10f      	bne.n	8000bce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d809      	bhi.n	8000bc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f913 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e004      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e001      	b.n	8000bd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000194 	.word	0x20000194

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000194 	.word	0x20000194

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff3e 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff31 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa2 	bl	8000d8c <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e098      	b.n	8000f98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <HAL_DMA_Init+0x150>)
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d80f      	bhi.n	8000e92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_DMA_Init+0x154>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_DMA_Init+0x158>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	009a      	lsls	r2, r3, #2
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_DMA_Init+0x15c>)
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e90:	e00e      	b.n	8000eb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <HAL_DMA_Init+0x160>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a43      	ldr	r2, [pc, #268]	; (8000fac <HAL_DMA_Init+0x158>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a42      	ldr	r2, [pc, #264]	; (8000fb8 <HAL_DMA_Init+0x164>)
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f0a:	d039      	beq.n	8000f80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <HAL_DMA_Init+0x15c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d11a      	bne.n	8000f4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <HAL_DMA_Init+0x168>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f003 031c 	and.w	r3, r3, #28
 8000f22:	210f      	movs	r1, #15
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	4924      	ldr	r1, [pc, #144]	; (8000fbc <HAL_DMA_Init+0x168>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_DMA_Init+0x168>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3c:	f003 031c 	and.w	r3, r3, #28
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	491d      	ldr	r1, [pc, #116]	; (8000fbc <HAL_DMA_Init+0x168>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
 8000f4a:	e019      	b.n	8000f80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_DMA_Init+0x16c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	f003 031c 	and.w	r3, r3, #28
 8000f58:	210f      	movs	r1, #15
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4917      	ldr	r1, [pc, #92]	; (8000fc0 <HAL_DMA_Init+0x16c>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_DMA_Init+0x16c>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6859      	ldr	r1, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f003 031c 	and.w	r3, r3, #28
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	4911      	ldr	r1, [pc, #68]	; (8000fc0 <HAL_DMA_Init+0x16c>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40020407 	.word	0x40020407
 8000fa8:	bffdfff8 	.word	0xbffdfff8
 8000fac:	cccccccd 	.word	0xcccccccd
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	bffdfbf8 	.word	0xbffdfbf8
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	400200a8 	.word	0x400200a8
 8000fc0:	400204a8 	.word	0x400204a8

08000fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d005      	beq.n	8000fe8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2204      	movs	r2, #4
 8000fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e029      	b.n	800103c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 020e 	bic.w	r2, r2, #14
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f003 021c 	and.w	r2, r3, #28
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	4798      	blx	r3
    }
  }
  return status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f003 031c 	and.w	r3, r3, #28
 8001066:	2204      	movs	r2, #4
 8001068:	409a      	lsls	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d026      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x7a>
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d021      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0320 	and.w	r3, r3, #32
 8001086:	2b00      	cmp	r3, #0
 8001088:	d107      	bne.n	800109a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0204 	bic.w	r2, r2, #4
 8001098:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f003 021c 	and.w	r2, r3, #28
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2104      	movs	r1, #4
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d071      	beq.n	800119a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010be:	e06c      	b.n	800119a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c4:	f003 031c 	and.w	r3, r3, #28
 80010c8:	2202      	movs	r2, #2
 80010ca:	409a      	lsls	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d02e      	beq.n	8001132 <HAL_DMA_IRQHandler+0xec>
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d029      	beq.n	8001132 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10b      	bne.n	8001104 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 020a 	bic.w	r2, r2, #10
 80010fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001108:	f003 021c 	and.w	r2, r3, #28
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	2102      	movs	r1, #2
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d038      	beq.n	800119a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001130:	e033      	b.n	800119a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f003 031c 	and.w	r3, r3, #28
 800113a:	2208      	movs	r2, #8
 800113c:	409a      	lsls	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d02a      	beq.n	800119c <HAL_DMA_IRQHandler+0x156>
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d025      	beq.n	800119c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 020e 	bic.w	r2, r2, #14
 800115e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	f003 021c 	and.w	r2, r3, #28
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800119a:	bf00      	nop
 800119c:	bf00      	nop
}
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	e17f      	b.n	80014d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8171 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d005      	beq.n	8001200 <HAL_GPIO_Init+0x40>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d130      	bne.n	8001262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001236:	2201      	movs	r2, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f003 0201 	and.w	r2, r3, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b03      	cmp	r3, #3
 800126c:	d118      	bne.n	80012a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80ac 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	4a5e      	ldr	r2, [pc, #376]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6613      	str	r3, [r2, #96]	; 0x60
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800138a:	4a5a      	ldr	r2, [pc, #360]	; (80014f4 <HAL_GPIO_Init+0x334>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x242>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x338>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x23e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_GPIO_Init+0x33c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x23a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x340>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x236>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x344>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x232>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x348>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x22e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_GPIO_Init+0x34c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x22a>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x244>
 8001402:	2300      	movs	r3, #0
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001414:	4937      	ldr	r1, [pc, #220]	; (80014f4 <HAL_GPIO_Init+0x334>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001446:	4a32      	ldr	r2, [pc, #200]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_GPIO_Init+0x350>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001470:	4a27      	ldr	r2, [pc, #156]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800149a:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_GPIO_Init+0x350>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_GPIO_Init+0x350>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_GPIO_Init+0x350>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae78 	bne.w	80011d0 <HAL_GPIO_Init+0x10>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48000800 	.word	0x48000800
 8001500:	48000c00 	.word	0x48000c00
 8001504:	48001000 	.word	0x48001000
 8001508:	48001400 	.word	0x48001400
 800150c:	48001800 	.word	0x48001800
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001530:	e002      	b.n	8001538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e08d      	b.n	8001672 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff f930 	bl	80007d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001594:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	e006      	b.n	80015cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d108      	bne.n	80015e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	e007      	b.n	80015f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001608:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001618:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69d9      	ldr	r1, [r3, #28]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2220      	movs	r2, #32
 800165e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
  }
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00f      	beq.n	80016f0 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00a      	beq.n	80016f0 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00f      	beq.n	800171a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00a      	beq.n	800171a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	f043 0208 	orr.w	r2, r3, #8
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001718:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00f      	beq.n	8001744 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00a      	beq.n	8001744 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f043 0202 	orr.w	r2, r3, #2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001742:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 030b 	and.w	r3, r3, #11
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fb82 	bl	8001e60 <I2C_ITError>
  }
}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
 8001798:	4613      	mov	r3, r2
 800179a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <I2C_Slave_ISR_IT+0x24>
 8001804:	2302      	movs	r3, #2
 8001806:	e0e1      	b.n	80019cc <I2C_Slave_ISR_IT+0x1e8>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001824:	6939      	ldr	r1, [r7, #16]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f9b4 	bl	8001b94 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d04b      	beq.n	80018ce <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800183c:	2b00      	cmp	r3, #0
 800183e:	d046      	beq.n	80018ce <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d128      	bne.n	800189c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b28      	cmp	r3, #40	; 0x28
 8001854:	d108      	bne.n	8001868 <I2C_Slave_ISR_IT+0x84>
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800185c:	d104      	bne.n	8001868 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 faa9 	bl	8001db8 <I2C_ITListenCplt>
 8001866:	e031      	b.n	80018cc <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b29      	cmp	r3, #41	; 0x29
 8001872:	d10e      	bne.n	8001892 <I2C_Slave_ISR_IT+0xae>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800187a:	d00a      	beq.n	8001892 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2210      	movs	r2, #16
 8001882:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 fc02 	bl	800208e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f926 	bl	8001adc <I2C_ITSlaveSeqCplt>
 8001890:	e01c      	b.n	80018cc <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2210      	movs	r2, #16
 8001898:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800189a:	e08f      	b.n	80019bc <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2210      	movs	r2, #16
 80018a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f043 0204 	orr.w	r2, r3, #4
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <I2C_Slave_ISR_IT+0xda>
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d17e      	bne.n	80019bc <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4619      	mov	r1, r3
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 facb 	bl	8001e60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80018ca:	e077      	b.n	80019bc <I2C_Slave_ISR_IT+0x1d8>
 80018cc:	e076      	b.n	80019bc <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d02f      	beq.n	8001938 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d02a      	beq.n	8001938 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d018      	beq.n	800191e <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d14b      	bne.n	80019c0 <I2C_Slave_ISR_IT+0x1dc>
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800192e:	d047      	beq.n	80019c0 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f8d3 	bl	8001adc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001936:	e043      	b.n	80019c0 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800194c:	6939      	ldr	r1, [r7, #16]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f840 	bl	80019d4 <I2C_ITAddrCplt>
 8001954:	e035      	b.n	80019c2 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d030      	beq.n	80019c2 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001966:	2b00      	cmp	r3, #0
 8001968:	d02b      	beq.n	80019c2 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196e:	b29b      	uxth	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d018      	beq.n	80019a6 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80019a4:	e00d      	b.n	80019c2 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d002      	beq.n	80019b4 <I2C_Slave_ISR_IT+0x1d0>
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f891 	bl	8001adc <I2C_ITSlaveSeqCplt>
 80019ba:	e002      	b.n	80019c2 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80019bc:	bf00      	nop
 80019be:	e000      	b.n	80019c2 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80019c0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80019ea:	2b28      	cmp	r3, #40	; 0x28
 80019ec:	d16a      	bne.n	8001ac4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	0c1b      	lsrs	r3, r3, #16
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a0c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a28:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d138      	bne.n	8001aa4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a32:	897b      	ldrh	r3, [r7, #10]
 8001a34:	09db      	lsrs	r3, r3, #7
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	89bb      	ldrh	r3, [r7, #12]
 8001a3a:	4053      	eors	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f003 0306 	and.w	r3, r3, #6
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11c      	bne.n	8001a80 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d13b      	bne.n	8001ad4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2208      	movs	r2, #8
 8001a68:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a72:	89ba      	ldrh	r2, [r7, #12]
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fe87 	bl	800178c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a7e:	e029      	b.n	8001ad4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001a80:	893b      	ldrh	r3, [r7, #8]
 8001a82:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fb42 	bl	8002112 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a96:	89ba      	ldrh	r2, [r7, #12]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fe75 	bl	800178c <HAL_I2C_AddrCallback>
}
 8001aa2:	e017      	b.n	8001ad4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001aa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fb32 	bl	8002112 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ab6:	89ba      	ldrh	r2, [r7, #12]
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fe65 	bl	800178c <HAL_I2C_AddrCallback>
}
 8001ac2:	e007      	b.n	8001ad4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e00c      	b.n	8001b2a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b29      	cmp	r3, #41	; 0x29
 8001b34:	d112      	bne.n	8001b5c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2228      	movs	r2, #40	; 0x28
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2221      	movs	r2, #33	; 0x21
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b44:	2101      	movs	r1, #1
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fae3 	bl	8002112 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fe05 	bl	8001764 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b5a:	e017      	b.n	8001b8c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b2a      	cmp	r3, #42	; 0x2a
 8001b66:	d111      	bne.n	8001b8c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2228      	movs	r2, #40	; 0x28
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2222      	movs	r2, #34	; 0x22
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b76:	2102      	movs	r1, #2
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 faca 	bl	8002112 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fdf6 	bl	8001778 <HAL_I2C_SlaveRxCpltCallback>
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b21      	cmp	r3, #33	; 0x21
 8001bbe:	d002      	beq.n	8001bc6 <I2C_ITSlaveCplt+0x32>
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b29      	cmp	r3, #41	; 0x29
 8001bc4:	d108      	bne.n	8001bd8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001bc6:	f248 0101 	movw	r1, #32769	; 0x8001
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 faa1 	bl	8002112 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2221      	movs	r2, #33	; 0x21
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd6:	e019      	b.n	8001c0c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b22      	cmp	r3, #34	; 0x22
 8001bdc:	d002      	beq.n	8001be4 <I2C_ITSlaveCplt+0x50>
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b2a      	cmp	r3, #42	; 0x2a
 8001be2:	d108      	bne.n	8001bf6 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001be4:	f248 0102 	movw	r1, #32770	; 0x8002
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa92 	bl	8002112 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2222      	movs	r2, #34	; 0x22
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf4:	e00a      	b.n	8001c0c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b28      	cmp	r3, #40	; 0x28
 8001bfa:	d107      	bne.n	8001c0c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001bfc:	f248 0103 	movw	r1, #32771	; 0x8003
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fa86 	bl	8002112 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b62      	ldr	r3, [pc, #392]	; (8001db0 <I2C_ITSlaveCplt+0x21c>)
 8001c28:	400b      	ands	r3, r1
 8001c2a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 fa2e 	bl	800208e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01f      	beq.n	8001c94 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c62:	e017      	b.n	8001c94 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d012      	beq.n	8001c94 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c7c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f043 0204 	orr.w	r2, r3, #4
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d010      	beq.n	8001d2e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8a4 	bl	8001e60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b28      	cmp	r3, #40	; 0x28
 8001d22:	d141      	bne.n	8001da8 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d24:	6979      	ldr	r1, [r7, #20]
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f846 	bl	8001db8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d2c:	e03c      	b.n	8001da8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d36:	d014      	beq.n	8001d62 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fecf 	bl	8001adc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <I2C_ITSlaveCplt+0x220>)
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fd24 	bl	80017a8 <HAL_I2C_ListenCpltCallback>
}
 8001d60:	e022      	b.n	8001da8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b22      	cmp	r3, #34	; 0x22
 8001d6c:	d10e      	bne.n	8001d8c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fcf7 	bl	8001778 <HAL_I2C_SlaveRxCpltCallback>
}
 8001d8a:	e00d      	b.n	8001da8 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fcde 	bl	8001764 <HAL_I2C_SlaveTxCpltCallback>
}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	fe00e800 	.word	0xfe00e800
 8001db4:	ffff0000 	.word	0xffff0000

08001db8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <I2C_ITListenCplt+0xa4>)
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d022      	beq.n	8001e34 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d012      	beq.n	8001e34 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	f043 0204 	orr.w	r2, r3, #4
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e34:	f248 0103 	movw	r1, #32771	; 0x8003
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f96a 	bl	8002112 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2210      	movs	r2, #16
 8001e44:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fcaa 	bl	80017a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	ffff0000 	.word	0xffff0000

08001e60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e70:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a6d      	ldr	r2, [pc, #436]	; (8002034 <I2C_ITError+0x1d4>)
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b28      	cmp	r3, #40	; 0x28
 8001e96:	d005      	beq.n	8001ea4 <I2C_ITError+0x44>
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b29      	cmp	r3, #41	; 0x29
 8001e9c:	d002      	beq.n	8001ea4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ea2:	d10b      	bne.n	8001ebc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f933 	bl	8002112 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2228      	movs	r2, #40	; 0x28
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a60      	ldr	r2, [pc, #384]	; (8002038 <I2C_ITError+0x1d8>)
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eba:	e030      	b.n	8001f1e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ebc:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f926 	bl	8002112 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8e1 	bl	800208e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b60      	cmp	r3, #96	; 0x60
 8001ed6:	d01f      	beq.n	8001f18 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d114      	bne.n	8001f18 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d109      	bne.n	8001f10 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2210      	movs	r2, #16
 8001f02:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2220      	movs	r2, #32
 8001f16:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d039      	beq.n	8001fa0 <I2C_ITError+0x140>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b11      	cmp	r3, #17
 8001f30:	d002      	beq.n	8001f38 <I2C_ITError+0xd8>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b21      	cmp	r3, #33	; 0x21
 8001f36:	d133      	bne.n	8001fa0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f46:	d107      	bne.n	8001f58 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f921 	bl	80011a4 <HAL_DMA_GetState>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d017      	beq.n	8001f98 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	4a33      	ldr	r2, [pc, #204]	; (800203c <I2C_ITError+0x1dc>)
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f821 	bl	8000fc4 <HAL_DMA_Abort_IT>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d04d      	beq.n	8002024 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f92:	4610      	mov	r0, r2
 8001f94:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f96:	e045      	b.n	8002024 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f851 	bl	8002040 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f9e:	e041      	b.n	8002024 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d039      	beq.n	800201c <I2C_ITError+0x1bc>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b12      	cmp	r3, #18
 8001fac:	d002      	beq.n	8001fb4 <I2C_ITError+0x154>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b22      	cmp	r3, #34	; 0x22
 8001fb2:	d133      	bne.n	800201c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc2:	d107      	bne.n	8001fd4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f8e3 	bl	80011a4 <HAL_DMA_GetState>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d017      	beq.n	8002014 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <I2C_ITError+0x1dc>)
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe ffe3 	bl	8000fc4 <HAL_DMA_Abort_IT>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d011      	beq.n	8002028 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800200e:	4610      	mov	r0, r2
 8002010:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002012:	e009      	b.n	8002028 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f813 	bl	8002040 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800201a:	e005      	b.n	8002028 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f80f 	bl	8002040 <I2C_TreatErrorCallback>
  }
}
 8002022:	e002      	b.n	800202a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002024:	bf00      	nop
 8002026:	e000      	b.n	800202a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002028:	bf00      	nop
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	ffff0000 	.word	0xffff0000
 8002038:	080017e5 	.word	0x080017e5
 800203c:	080020d7 	.word	0x080020d7

08002040 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b60      	cmp	r3, #96	; 0x60
 8002052:	d10e      	bne.n	8002072 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fbb0 	bl	80017d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002070:	e009      	b.n	8002086 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fb9b 	bl	80017bc <HAL_I2C_ErrorCallback>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d103      	bne.n	80020ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d007      	beq.n	80020ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	619a      	str	r2, [r3, #24]
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	2200      	movs	r2, #0
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff ff9b 	bl	8002040 <I2C_TreatErrorCallback>
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00f      	beq.n	800214c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002132:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002140:	2b28      	cmp	r3, #40	; 0x28
 8002142:	d003      	beq.n	800214c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800214a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00f      	beq.n	8002176 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800215c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800216a:	2b28      	cmp	r3, #40	; 0x28
 800216c:	d003      	beq.n	8002176 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002174:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800217a:	2b00      	cmp	r3, #0
 800217c:	da03      	bge.n	8002186 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	2b10      	cmp	r3, #16
 800218a:	d103      	bne.n	8002194 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002192:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	2b20      	cmp	r3, #32
 8002198:	d103      	bne.n	80021a2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f043 0320 	orr.w	r3, r3, #32
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d103      	bne.n	80021b0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43da      	mvns	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d138      	bne.n	8002256 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e032      	b.n	8002258 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2224      	movs	r2, #36	; 0x24
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002220:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6819      	ldr	r1, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b20      	cmp	r3, #32
 8002278:	d139      	bne.n	80022ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002284:	2302      	movs	r3, #2
 8002286:	e033      	b.n	80022f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
  }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_PWREx_GetVoltageRange+0x18>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40007000 	.word	0x40007000

08002318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002326:	d130      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002334:	d038      	beq.n	80023a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002344:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2232      	movs	r2, #50	; 0x32
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9b      	lsrs	r3, r3, #18
 8002358:	3301      	adds	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800235c:	e002      	b.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3b01      	subs	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002370:	d102      	bne.n	8002378 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f2      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	d110      	bne.n	80023a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e00f      	b.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002396:	d007      	beq.n	80023a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a0:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40007000 	.word	0x40007000
 80023bc:	20000000 	.word	0x20000000
 80023c0:	431bde83 	.word	0x431bde83

080023c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e3ca      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d6:	4b97      	ldr	r3, [pc, #604]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e0:	4b94      	ldr	r3, [pc, #592]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80e4 	beq.w	80025c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_RCC_OscConfig+0x4a>
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b0c      	cmp	r3, #12
 8002402:	f040 808b 	bne.w	800251c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b01      	cmp	r3, #1
 800240a:	f040 8087 	bne.w	800251c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800240e:	4b89      	ldr	r3, [pc, #548]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x62>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e3a2      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1a      	ldr	r2, [r3, #32]
 800242a:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <HAL_RCC_OscConfig+0x7c>
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800243e:	e005      	b.n	800244c <HAL_RCC_OscConfig+0x88>
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244c:	4293      	cmp	r3, r2
 800244e:	d223      	bcs.n	8002498 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fd55 	bl	8002f04 <RCC_SetFlashLatencyFromMSIRange>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e383      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002464:	4b73      	ldr	r3, [pc, #460]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a72      	ldr	r2, [pc, #456]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800246a:	f043 0308 	orr.w	r3, r3, #8
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	496d      	ldr	r1, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002482:	4b6c      	ldr	r3, [pc, #432]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	4968      	ldr	r1, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
 8002496:	e025      	b.n	80024e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002498:	4b66      	ldr	r3, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b63      	ldr	r3, [pc, #396]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4960      	ldr	r1, [pc, #384]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b6:	4b5f      	ldr	r3, [pc, #380]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	495b      	ldr	r1, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fd15 	bl	8002f04 <RCC_SetFlashLatencyFromMSIRange>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e343      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e4:	f000 fc4a 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b52      	ldr	r3, [pc, #328]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	4950      	ldr	r1, [pc, #320]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	4a4e      	ldr	r2, [pc, #312]	; (800263c <HAL_RCC_OscConfig+0x278>)
 8002502:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002504:	4b4e      	ldr	r3, [pc, #312]	; (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fb35 	bl	8000b78 <HAL_InitTick>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d052      	beq.n	80025be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	e327      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d032      	beq.n	800258a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a42      	ldr	r2, [pc, #264]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002530:	f7fe fb72 	bl	8000c18 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002538:	f7fe fb6e 	bl	8000c18 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e310      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254a:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002556:	4b37      	ldr	r3, [pc, #220]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a36      	ldr	r2, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4931      	ldr	r1, [pc, #196]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	492c      	ldr	r1, [pc, #176]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	e01a      	b.n	80025c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a29      	ldr	r2, [pc, #164]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002596:	f7fe fb3f 	bl	8000c18 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259e:	f7fe fb3b 	bl	8000c18 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e2dd      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f0      	bne.n	800259e <HAL_RCC_OscConfig+0x1da>
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d074      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x21a>
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d10e      	bne.n	80025f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d10b      	bne.n	80025f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d064      	beq.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d160      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e2ba      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x24a>
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e026      	b.n	800265c <HAL_RCC_OscConfig+0x298>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002616:	d115      	bne.n	8002644 <HAL_RCC_OscConfig+0x280>
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800261e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a02      	ldr	r2, [pc, #8]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	e014      	b.n	800265c <HAL_RCC_OscConfig+0x298>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	080043e4 	.word	0x080043e4
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004
 8002644:	4ba0      	ldr	r3, [pc, #640]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a9f      	ldr	r2, [pc, #636]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b9d      	ldr	r3, [pc, #628]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a9c      	ldr	r2, [pc, #624]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fad8 	bl	8000c18 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fad4 	bl	8000c18 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e276      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267e:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x2a8>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fac4 	bl	8000c18 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe fac0 	bl	8000c18 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e262      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a6:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x2d0>
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d060      	beq.n	8002784 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_OscConfig+0x310>
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d119      	bne.n	8002702 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d116      	bne.n	8002702 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d4:	4b7c      	ldr	r3, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_OscConfig+0x328>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e23f      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	4973      	ldr	r1, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002700:	e040      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d023      	beq.n	8002752 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270a:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6e      	ldr	r2, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe fa7f 	bl	8000c18 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271e:	f7fe fa7b 	bl	8000c18 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e21d      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002730:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b62      	ldr	r3, [pc, #392]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	495f      	ldr	r1, [pc, #380]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
 8002750:	e018      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a5c      	ldr	r2, [pc, #368]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800275c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fe fa5b 	bl	8000c18 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002766:	f7fe fa57 	bl	8000c18 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e1f9      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d03c      	beq.n	800280a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800279a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279e:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fa36 	bl	8000c18 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7fe fa32 	bl	8000c18 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1d4      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80027c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <HAL_RCC_OscConfig+0x3ec>
 80027d0:	e01b      	b.n	800280a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d8:	4a3b      	ldr	r2, [pc, #236]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7fe fa19 	bl	8000c18 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ea:	f7fe fa15 	bl	8000c18 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1b7      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80a6 	beq.w	8002964 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10d      	bne.n	8002844 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a26      	ldr	r2, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002840:	2301      	movs	r3, #1
 8002842:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCC_OscConfig+0x508>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d118      	bne.n	8002882 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_OscConfig+0x508>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x508>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285c:	f7fe f9dc 	bl	8000c18 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002864:	f7fe f9d8 	bl	8000c18 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e17a      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x508>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d108      	bne.n	800289c <HAL_RCC_OscConfig+0x4d8>
 800288a:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289a:	e029      	b.n	80028f0 <HAL_RCC_OscConfig+0x52c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d115      	bne.n	80028d0 <HAL_RCC_OscConfig+0x50c>
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <HAL_RCC_OscConfig+0x504>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c4:	e014      	b.n	80028f0 <HAL_RCC_OscConfig+0x52c>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
 80028d0:	4b9c      	ldr	r3, [pc, #624]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	4a9b      	ldr	r2, [pc, #620]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e0:	4b98      	ldr	r3, [pc, #608]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	4a97      	ldr	r2, [pc, #604]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d016      	beq.n	8002926 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe f98e 	bl	8000c18 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe f98a 	bl	8000c18 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e12a      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002916:	4b8b      	ldr	r3, [pc, #556]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ed      	beq.n	8002900 <HAL_RCC_OscConfig+0x53c>
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe f977 	bl	8000c18 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe f973 	bl	8000c18 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e113      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002944:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1ed      	bne.n	800292e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002952:	7ffb      	ldrb	r3, [r7, #31]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002958:	4b7a      	ldr	r3, [pc, #488]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a79      	ldr	r2, [pc, #484]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80fe 	beq.w	8002b6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	2b02      	cmp	r3, #2
 8002974:	f040 80d0 	bne.w	8002b18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002978:	4b72      	ldr	r3, [pc, #456]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	429a      	cmp	r2, r3
 800298a:	d130      	bne.n	80029ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	3b01      	subs	r3, #1
 8002998:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d127      	bne.n	80029ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d11f      	bne.n	80029ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029b8:	2a07      	cmp	r2, #7
 80029ba:	bf14      	ite	ne
 80029bc:	2201      	movne	r2, #1
 80029be:	2200      	moveq	r2, #0
 80029c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d113      	bne.n	80029ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	3b01      	subs	r3, #1
 80029e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d06e      	beq.n	8002acc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d069      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0ad      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a10:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a1c:	f7fe f8fc 	bl	8000c18 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe f8f8 	bl	8000c18 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e09a      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a36:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a42:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <HAL_RCC_OscConfig+0x784>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a52:	3a01      	subs	r2, #1
 8002a54:	0112      	lsls	r2, r2, #4
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a5c:	0212      	lsls	r2, r2, #8
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a64:	0852      	lsrs	r2, r2, #1
 8002a66:	3a01      	subs	r2, #1
 8002a68:	0552      	lsls	r2, r2, #21
 8002a6a:	4311      	orrs	r1, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a70:	0852      	lsrs	r2, r2, #1
 8002a72:	3a01      	subs	r2, #1
 8002a74:	0652      	lsls	r2, r2, #25
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7c:	0912      	lsrs	r2, r2, #4
 8002a7e:	0452      	lsls	r2, r2, #17
 8002a80:	430a      	orrs	r2, r1
 8002a82:	4930      	ldr	r1, [pc, #192]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a88:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a94:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a2a      	ldr	r2, [pc, #168]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa0:	f7fe f8ba 	bl	8000c18 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe f8b6 	bl	8000c18 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e058      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac6:	e050      	b.n	8002b6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e04f      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d148      	bne.n	8002b6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af0:	f7fe f892 	bl	8000c18 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe f88e 	bl	8000c18 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e030      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x734>
 8002b16:	e028      	b.n	8002b6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d023      	beq.n	8002b66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <HAL_RCC_OscConfig+0x780>)
 8002b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe f875 	bl	8000c18 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	e00c      	b.n	8002b4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe f871 	bl	8000c18 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d905      	bls.n	8002b4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e013      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_OscConfig+0x7b0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ec      	bne.n	8002b32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_OscConfig+0x7b0>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	4905      	ldr	r1, [pc, #20]	; (8002b74 <HAL_RCC_OscConfig+0x7b0>)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x7b4>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60cb      	str	r3, [r1, #12]
 8002b64:	e001      	b.n	8002b6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	feeefffc 	.word	0xfeeefffc

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0e7      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b75      	ldr	r3, [pc, #468]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d910      	bls.n	8002bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 0207 	bic.w	r2, r3, #7
 8002ba6:	4970      	ldr	r1, [pc, #448]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b6e      	ldr	r3, [pc, #440]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0cf      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d010      	beq.n	8002bee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d908      	bls.n	8002bee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4960      	ldr	r1, [pc, #384]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d04c      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d121      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0a6      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d115      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e09a      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c32:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e08e      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e086      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4943      	ldr	r1, [pc, #268]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c64:	f7fd ffd8 	bl	8000c18 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7fd ffd4 	bl	8000c18 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e06e      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d208      	bcs.n	8002cc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	492b      	ldr	r1, [pc, #172]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d210      	bcs.n	8002cf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 0207 	bic.w	r2, r3, #7
 8002cd8:	4923      	ldr	r1, [pc, #140]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e036      	b.n	8002d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4918      	ldr	r1, [pc, #96]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4910      	ldr	r1, [pc, #64]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d30:	f000 f824 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	490b      	ldr	r1, [pc, #44]	; (8002d70 <HAL_RCC_ClockConfig+0x1f4>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1fc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd ff0f 	bl	8000b78 <HAL_InitTick>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40022000 	.word	0x40022000
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	080043e4 	.word	0x080043e4
 8002d74:	20000000 	.word	0x20000000
 8002d78:	20000004 	.word	0x20000004

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d94:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x34>
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d121      	bne.n	8002dee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d11e      	bne.n	8002dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	e005      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dd8:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d102      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	e004      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d134      	bne.n	8002e74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d003      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0xac>
 8002e20:	e005      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e24:	617b      	str	r3, [r7, #20]
      break;
 8002e26:	e005      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e2a:	617b      	str	r3, [r7, #20]
      break;
 8002e2c:	e002      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	617b      	str	r3, [r7, #20]
      break;
 8002e32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	3301      	adds	r3, #1
 8002e40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	fb03 f202 	mul.w	r2, r3, r2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	0e5b      	lsrs	r3, r3, #25
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	3301      	adds	r3, #1
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e74:	69bb      	ldr	r3, [r7, #24]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	; 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	080043fc 	.word	0x080043fc
 8002e8c:	00f42400 	.word	0x00f42400
 8002e90:	007a1200 	.word	0x007a1200

08002e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000

08002eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eb0:	f7ff fff0 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	080043f4 	.word	0x080043f4

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002edc:	f7ff ffda 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0adb      	lsrs	r3, r3, #11
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4904      	ldr	r1, [pc, #16]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	080043f4 	.word	0x080043f4

08002f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f10:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f1c:	f7ff f9ee 	bl	80022fc <HAL_PWREx_GetVoltageRange>
 8002f20:	6178      	str	r0, [r7, #20]
 8002f22:	e014      	b.n	8002f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f30:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f3c:	f7ff f9de 	bl	80022fc <HAL_PWREx_GetVoltageRange>
 8002f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f54:	d10b      	bne.n	8002f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d919      	bls.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f60:	d902      	bls.n	8002f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f62:	2302      	movs	r3, #2
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e013      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f68:	2301      	movs	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e010      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d902      	bls.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f74:	2303      	movs	r3, #3
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	e00a      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d102      	bne.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f80:	2302      	movs	r3, #2
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e004      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b70      	cmp	r3, #112	; 0x70
 8002f8a:	d101      	bne.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 0207 	bic.w	r2, r3, #7
 8002f98:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d001      	beq.n	8002fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40022000 	.word	0x40022000

08002fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d041      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe8:	d02a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fee:	d824      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff4:	d008      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ffa:	d81e      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003004:	d010      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003006:	e018      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003008:	4b86      	ldr	r3, [pc, #536]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a85      	ldr	r2, [pc, #532]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003014:	e015      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fabb 	bl	8003598 <RCCEx_PLLSAI1_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003026:	e00c      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3320      	adds	r3, #32
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fba6 	bl	8003780 <RCCEx_PLLSAI2_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003038:	e003      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	74fb      	strb	r3, [r7, #19]
      break;
 800303e:	e000      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003048:	4b76      	ldr	r3, [pc, #472]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003056:	4973      	ldr	r1, [pc, #460]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305e:	e001      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d041      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003074:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003078:	d02a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800307a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800307e:	d824      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003080:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003084:	d008      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800308a:	d81e      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003094:	d010      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003096:	e018      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003098:	4b62      	ldr	r3, [pc, #392]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a61      	ldr	r2, [pc, #388]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a4:	e015      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fa73 	bl	8003598 <RCCEx_PLLSAI1_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b6:	e00c      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3320      	adds	r3, #32
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fb5e 	bl	8003780 <RCCEx_PLLSAI2_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c8:	e003      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	74fb      	strb	r3, [r7, #19]
      break;
 80030ce:	e000      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d8:	4b52      	ldr	r3, [pc, #328]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e6:	494f      	ldr	r1, [pc, #316]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ee:	e001      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a0 	beq.w	8003242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003116:	2300      	movs	r3, #0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00d      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311c:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a40      	ldr	r2, [pc, #256]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
 8003128:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003134:	2301      	movs	r3, #1
 8003136:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003138:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a3a      	ldr	r2, [pc, #232]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003144:	f7fd fd68 	bl	8000c18 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800314a:	e009      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314c:	f7fd fd64 	bl	8000c18 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	74fb      	strb	r3, [r7, #19]
        break;
 800315e:	e005      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003160:	4b31      	ldr	r3, [pc, #196]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ef      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d15c      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01f      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	d019      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003190:	4b24      	ldr	r3, [pc, #144]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800319c:	4b21      	ldr	r3, [pc, #132]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a20      	ldr	r2, [pc, #128]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031bc:	4a19      	ldr	r2, [pc, #100]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fd fd23 	bl	8000c18 <HAL_GetTick>
 80031d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d4:	e00b      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fd fd1f 	bl	8000c18 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d902      	bls.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	74fb      	strb	r3, [r7, #19]
            break;
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ec      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10c      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003212:	4904      	ldr	r1, [pc, #16]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800321a:	e009      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
 8003220:	e006      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003230:	7c7b      	ldrb	r3, [r7, #17]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b9e      	ldr	r3, [pc, #632]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a9d      	ldr	r2, [pc, #628]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324e:	4b98      	ldr	r3, [pc, #608]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f023 0203 	bic.w	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	4994      	ldr	r1, [pc, #592]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003270:	4b8f      	ldr	r3, [pc, #572]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f023 020c 	bic.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327e:	498c      	ldr	r1, [pc, #560]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003292:	4b87      	ldr	r3, [pc, #540]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	4983      	ldr	r1, [pc, #524]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b4:	4b7e      	ldr	r3, [pc, #504]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	497b      	ldr	r1, [pc, #492]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d6:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e4:	4972      	ldr	r1, [pc, #456]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f8:	4b6d      	ldr	r3, [pc, #436]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	496a      	ldr	r1, [pc, #424]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800331a:	4b65      	ldr	r3, [pc, #404]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	4961      	ldr	r1, [pc, #388]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800333c:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	4959      	ldr	r1, [pc, #356]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335e:	4b54      	ldr	r3, [pc, #336]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336c:	4950      	ldr	r1, [pc, #320]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	4948      	ldr	r1, [pc, #288]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033a2:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	493f      	ldr	r1, [pc, #252]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d028      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c4:	4b3a      	ldr	r3, [pc, #232]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d2:	4937      	ldr	r1, [pc, #220]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e2:	d106      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e4:	4b32      	ldr	r3, [pc, #200]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a31      	ldr	r2, [pc, #196]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ee:	60d3      	str	r3, [r2, #12]
 80033f0:	e011      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033fa:	d10c      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	2101      	movs	r1, #1
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f8c8 	bl	8003598 <RCCEx_PLLSAI1_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d028      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	491f      	ldr	r1, [pc, #124]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003440:	d106      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800344c:	60d3      	str	r3, [r2, #12]
 800344e:	e011      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003458:	d10c      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2101      	movs	r1, #1
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f899 	bl	8003598 <RCCEx_PLLSAI1_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800346a:	7cfb      	ldrb	r3, [r7, #19]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d02b      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349e:	d109      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a02      	ldr	r2, [pc, #8]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034aa:	60d3      	str	r3, [r2, #12]
 80034ac:	e014      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2101      	movs	r1, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f867 	bl	8003598 <RCCEx_PLLSAI1_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d02f      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e4:	4b2b      	ldr	r3, [pc, #172]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f2:	4928      	ldr	r1, [pc, #160]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003502:	d10d      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f844 	bl	8003598 <RCCEx_PLLSAI1_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d014      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	74bb      	strb	r3, [r7, #18]
 800351e:	e011      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003528:	d10c      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3320      	adds	r3, #32
 800352e:	2102      	movs	r1, #2
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f925 	bl	8003780 <RCCEx_PLLSAI2_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003550:	4b10      	ldr	r3, [pc, #64]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355e:	490d      	ldr	r1, [pc, #52]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003582:	4904      	ldr	r1, [pc, #16]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800358a:	7cbb      	ldrb	r3, [r7, #18]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40021000 	.word	0x40021000

08003598 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035a6:	4b75      	ldr	r3, [pc, #468]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d018      	beq.n	80035e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035b2:	4b72      	ldr	r3, [pc, #456]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0203 	and.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d10d      	bne.n	80035de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
       ||
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035ca:	4b6c      	ldr	r3, [pc, #432]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
       ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d047      	beq.n	800366e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	e044      	b.n	800366e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d018      	beq.n	800361e <RCCEx_PLLSAI1_Config+0x86>
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d825      	bhi.n	800363c <RCCEx_PLLSAI1_Config+0xa4>
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d002      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x62>
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d009      	beq.n	800360c <RCCEx_PLLSAI1_Config+0x74>
 80035f8:	e020      	b.n	800363c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035fa:	4b60      	ldr	r3, [pc, #384]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11d      	bne.n	8003642 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360a:	e01a      	b.n	8003642 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800360c:	4b5b      	ldr	r3, [pc, #364]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d116      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e013      	b.n	8003646 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361e:	4b57      	ldr	r3, [pc, #348]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800362a:	4b54      	ldr	r3, [pc, #336]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800363a:	e006      	b.n	800364a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      break;
 8003640:	e004      	b.n	800364c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003642:	bf00      	nop
 8003644:	e002      	b.n	800364c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800364a:	bf00      	nop
    }

    if(status == HAL_OK)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003652:	4b4a      	ldr	r3, [pc, #296]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	430b      	orrs	r3, r1
 8003668:	4944      	ldr	r1, [pc, #272]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d17d      	bne.n	8003770 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003674:	4b41      	ldr	r3, [pc, #260]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a40      	ldr	r2, [pc, #256]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800367e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fd faca 	bl	8000c18 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003686:	e009      	b.n	800369c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003688:	f7fd fac6 	bl	8000c18 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d902      	bls.n	800369c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	73fb      	strb	r3, [r7, #15]
        break;
 800369a:	e005      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800369c:	4b37      	ldr	r3, [pc, #220]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ef      	bne.n	8003688 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d160      	bne.n	8003770 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d111      	bne.n	80036d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b4:	4b31      	ldr	r3, [pc, #196]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6892      	ldr	r2, [r2, #8]
 80036c4:	0211      	lsls	r1, r2, #8
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	0912      	lsrs	r2, r2, #4
 80036cc:	0452      	lsls	r2, r2, #17
 80036ce:	430a      	orrs	r2, r1
 80036d0:	492a      	ldr	r1, [pc, #168]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]
 80036d6:	e027      	b.n	8003728 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d112      	bne.n	8003704 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036de:	4b27      	ldr	r3, [pc, #156]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6892      	ldr	r2, [r2, #8]
 80036ee:	0211      	lsls	r1, r2, #8
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6912      	ldr	r2, [r2, #16]
 80036f4:	0852      	lsrs	r2, r2, #1
 80036f6:	3a01      	subs	r2, #1
 80036f8:	0552      	lsls	r2, r2, #21
 80036fa:	430a      	orrs	r2, r1
 80036fc:	491f      	ldr	r1, [pc, #124]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	610b      	str	r3, [r1, #16]
 8003702:	e011      	b.n	8003728 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800370c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6892      	ldr	r2, [r2, #8]
 8003714:	0211      	lsls	r1, r2, #8
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6952      	ldr	r2, [r2, #20]
 800371a:	0852      	lsrs	r2, r2, #1
 800371c:	3a01      	subs	r2, #1
 800371e:	0652      	lsls	r2, r2, #25
 8003720:	430a      	orrs	r2, r1
 8003722:	4916      	ldr	r1, [pc, #88]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a13      	ldr	r2, [pc, #76]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fd fa70 	bl	8000c18 <HAL_GetTick>
 8003738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800373a:	e009      	b.n	8003750 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800373c:	f7fd fa6c 	bl	8000c18 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d902      	bls.n	8003750 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	73fb      	strb	r3, [r7, #15]
          break;
 800374e:	e005      	b.n	800375c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ef      	beq.n	800373c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	4904      	ldr	r1, [pc, #16]	; (800377c <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000

08003780 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800378e:	4b6a      	ldr	r3, [pc, #424]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d018      	beq.n	80037cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800379a:	4b67      	ldr	r3, [pc, #412]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0203 	and.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d10d      	bne.n	80037c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
       ||
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037b2:	4b61      	ldr	r3, [pc, #388]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
       ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d047      	beq.n	8003856 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	e044      	b.n	8003856 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d018      	beq.n	8003806 <RCCEx_PLLSAI2_Config+0x86>
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d825      	bhi.n	8003824 <RCCEx_PLLSAI2_Config+0xa4>
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d002      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0x62>
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d009      	beq.n	80037f4 <RCCEx_PLLSAI2_Config+0x74>
 80037e0:	e020      	b.n	8003824 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037e2:	4b55      	ldr	r3, [pc, #340]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11d      	bne.n	800382a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f2:	e01a      	b.n	800382a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d116      	bne.n	800382e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003804:	e013      	b.n	800382e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003806:	4b4c      	ldr	r3, [pc, #304]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003812:	4b49      	ldr	r3, [pc, #292]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003822:	e006      	b.n	8003832 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      break;
 8003828:	e004      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003832:	bf00      	nop
    }

    if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10d      	bne.n	8003856 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6819      	ldr	r1, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	430b      	orrs	r3, r1
 8003850:	4939      	ldr	r1, [pc, #228]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	4313      	orrs	r3, r2
 8003854:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d167      	bne.n	800392c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a35      	ldr	r2, [pc, #212]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003868:	f7fd f9d6 	bl	8000c18 <HAL_GetTick>
 800386c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800386e:	e009      	b.n	8003884 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003870:	f7fd f9d2 	bl	8000c18 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d902      	bls.n	8003884 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	73fb      	strb	r3, [r7, #15]
        break;
 8003882:	e005      	b.n	8003890 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003884:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ef      	bne.n	8003870 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d14a      	bne.n	800392c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d111      	bne.n	80038c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800389c:	4b26      	ldr	r3, [pc, #152]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	0211      	lsls	r1, r2, #8
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68d2      	ldr	r2, [r2, #12]
 80038b2:	0912      	lsrs	r2, r2, #4
 80038b4:	0452      	lsls	r2, r2, #17
 80038b6:	430a      	orrs	r2, r1
 80038b8:	491f      	ldr	r1, [pc, #124]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	614b      	str	r3, [r1, #20]
 80038be:	e011      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6892      	ldr	r2, [r2, #8]
 80038d0:	0211      	lsls	r1, r2, #8
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6912      	ldr	r2, [r2, #16]
 80038d6:	0852      	lsrs	r2, r2, #1
 80038d8:	3a01      	subs	r2, #1
 80038da:	0652      	lsls	r2, r2, #25
 80038dc:	430a      	orrs	r2, r1
 80038de:	4916      	ldr	r1, [pc, #88]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd f992 	bl	8000c18 <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038f6:	e009      	b.n	800390c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038f8:	f7fd f98e 	bl	8000c18 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	73fb      	strb	r3, [r7, #15]
          break;
 800390a:	e005      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ef      	beq.n	80038f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4904      	ldr	r1, [pc, #16]	; (8003938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e040      	b.n	80039d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd f800 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	; 0x24
 8003968:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fae0 	bl	8003f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f825 	bl	80039d8 <UART_SetConfig>
 800398e:	4603      	mov	r3, r0
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e01b      	b.n	80039d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fb5f 	bl	800408c <UART_CheckIdleState>
 80039ce:	4603      	mov	r3, r0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039dc:	b08a      	sub	sp, #40	; 0x28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4ba4      	ldr	r3, [pc, #656]	; (8003c98 <UART_SetConfig+0x2c0>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a10:	430b      	orrs	r3, r1
 8003a12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a99      	ldr	r2, [pc, #612]	; (8003c9c <UART_SetConfig+0x2c4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	4313      	orrs	r3, r2
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a90      	ldr	r2, [pc, #576]	; (8003ca0 <UART_SetConfig+0x2c8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d126      	bne.n	8003ab0 <UART_SetConfig+0xd8>
 8003a62:	4b90      	ldr	r3, [pc, #576]	; (8003ca4 <UART_SetConfig+0x2cc>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d81b      	bhi.n	8003aa8 <UART_SetConfig+0xd0>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <UART_SetConfig+0xa0>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a99 	.word	0x08003a99
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003aa1 	.word	0x08003aa1
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e116      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003a90:	2302      	movs	r3, #2
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e112      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e10e      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e10a      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e106      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a7c      	ldr	r2, [pc, #496]	; (8003ca8 <UART_SetConfig+0x2d0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d138      	bne.n	8003b2c <UART_SetConfig+0x154>
 8003aba:	4b7a      	ldr	r3, [pc, #488]	; (8003ca4 <UART_SetConfig+0x2cc>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	d82d      	bhi.n	8003b24 <UART_SetConfig+0x14c>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <UART_SetConfig+0xf8>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003b25 	.word	0x08003b25
 8003ad8:	08003b25 	.word	0x08003b25
 8003adc:	08003b25 	.word	0x08003b25
 8003ae0:	08003b15 	.word	0x08003b15
 8003ae4:	08003b25 	.word	0x08003b25
 8003ae8:	08003b25 	.word	0x08003b25
 8003aec:	08003b25 	.word	0x08003b25
 8003af0:	08003b0d 	.word	0x08003b0d
 8003af4:	08003b25 	.word	0x08003b25
 8003af8:	08003b25 	.word	0x08003b25
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b1d 	.word	0x08003b1d
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e0d8      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e0d4      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b14:	2304      	movs	r3, #4
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e0d0      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e0cc      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b24:	2310      	movs	r3, #16
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e0c8      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <UART_SetConfig+0x2d4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d125      	bne.n	8003b82 <UART_SetConfig+0x1aa>
 8003b36:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <UART_SetConfig+0x2cc>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b40:	2b30      	cmp	r3, #48	; 0x30
 8003b42:	d016      	beq.n	8003b72 <UART_SetConfig+0x19a>
 8003b44:	2b30      	cmp	r3, #48	; 0x30
 8003b46:	d818      	bhi.n	8003b7a <UART_SetConfig+0x1a2>
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d00a      	beq.n	8003b62 <UART_SetConfig+0x18a>
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d814      	bhi.n	8003b7a <UART_SetConfig+0x1a2>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <UART_SetConfig+0x182>
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d008      	beq.n	8003b6a <UART_SetConfig+0x192>
 8003b58:	e00f      	b.n	8003b7a <UART_SetConfig+0x1a2>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b60:	e0ad      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b62:	2302      	movs	r3, #2
 8003b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b68:	e0a9      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b70:	e0a5      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b72:	2308      	movs	r3, #8
 8003b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b78:	e0a1      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b7a:	2310      	movs	r3, #16
 8003b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b80:	e09d      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <UART_SetConfig+0x2d8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d125      	bne.n	8003bd8 <UART_SetConfig+0x200>
 8003b8c:	4b45      	ldr	r3, [pc, #276]	; (8003ca4 <UART_SetConfig+0x2cc>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b96:	2bc0      	cmp	r3, #192	; 0xc0
 8003b98:	d016      	beq.n	8003bc8 <UART_SetConfig+0x1f0>
 8003b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b9c:	d818      	bhi.n	8003bd0 <UART_SetConfig+0x1f8>
 8003b9e:	2b80      	cmp	r3, #128	; 0x80
 8003ba0:	d00a      	beq.n	8003bb8 <UART_SetConfig+0x1e0>
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d814      	bhi.n	8003bd0 <UART_SetConfig+0x1f8>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <UART_SetConfig+0x1d8>
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d008      	beq.n	8003bc0 <UART_SetConfig+0x1e8>
 8003bae:	e00f      	b.n	8003bd0 <UART_SetConfig+0x1f8>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e082      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e07e      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e07a      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003bc8:	2308      	movs	r3, #8
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e076      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e072      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a35      	ldr	r2, [pc, #212]	; (8003cb4 <UART_SetConfig+0x2dc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d12a      	bne.n	8003c38 <UART_SetConfig+0x260>
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <UART_SetConfig+0x2cc>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf0:	d01a      	beq.n	8003c28 <UART_SetConfig+0x250>
 8003bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf6:	d81b      	bhi.n	8003c30 <UART_SetConfig+0x258>
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfc:	d00c      	beq.n	8003c18 <UART_SetConfig+0x240>
 8003bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c02:	d815      	bhi.n	8003c30 <UART_SetConfig+0x258>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <UART_SetConfig+0x238>
 8003c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0c:	d008      	beq.n	8003c20 <UART_SetConfig+0x248>
 8003c0e:	e00f      	b.n	8003c30 <UART_SetConfig+0x258>
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c16:	e052      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1e:	e04e      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e04a      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e046      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e042      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <UART_SetConfig+0x2c4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d13a      	bne.n	8003cb8 <UART_SetConfig+0x2e0>
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <UART_SetConfig+0x2cc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c50:	d01a      	beq.n	8003c88 <UART_SetConfig+0x2b0>
 8003c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c56:	d81b      	bhi.n	8003c90 <UART_SetConfig+0x2b8>
 8003c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5c:	d00c      	beq.n	8003c78 <UART_SetConfig+0x2a0>
 8003c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c62:	d815      	bhi.n	8003c90 <UART_SetConfig+0x2b8>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <UART_SetConfig+0x298>
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6c:	d008      	beq.n	8003c80 <UART_SetConfig+0x2a8>
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x2b8>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e022      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e01e      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c80:	2304      	movs	r3, #4
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e01a      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e016      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c90:	2310      	movs	r3, #16
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c96:	e012      	b.n	8003cbe <UART_SetConfig+0x2e6>
 8003c98:	efff69f3 	.word	0xefff69f3
 8003c9c:	40008000 	.word	0x40008000
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40004400 	.word	0x40004400
 8003cac:	40004800 	.word	0x40004800
 8003cb0:	40004c00 	.word	0x40004c00
 8003cb4:	40005000 	.word	0x40005000
 8003cb8:	2310      	movs	r3, #16
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a9f      	ldr	r2, [pc, #636]	; (8003f40 <UART_SetConfig+0x568>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d17a      	bne.n	8003dbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d824      	bhi.n	8003d1a <UART_SetConfig+0x342>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0x300>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003cfd 	.word	0x08003cfd
 8003cdc:	08003d1b 	.word	0x08003d1b
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d1b 	.word	0x08003d1b
 8003ce8:	08003d0b 	.word	0x08003d0b
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d1b 	.word	0x08003d1b
 8003cf4:	08003d1b 	.word	0x08003d1b
 8003cf8:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cfc:	f7ff f8d6 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8003d00:	61f8      	str	r0, [r7, #28]
        break;
 8003d02:	e010      	b.n	8003d26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b8f      	ldr	r3, [pc, #572]	; (8003f44 <UART_SetConfig+0x56c>)
 8003d06:	61fb      	str	r3, [r7, #28]
        break;
 8003d08:	e00d      	b.n	8003d26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7ff f837 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8003d0e:	61f8      	str	r0, [r7, #28]
        break;
 8003d10:	e009      	b.n	8003d26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	61fb      	str	r3, [r7, #28]
        break;
 8003d18:	e005      	b.n	8003d26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80fb 	beq.w	8003f24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d305      	bcc.n	8003d4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d903      	bls.n	8003d52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d50:	e0e8      	b.n	8003f24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2200      	movs	r2, #0
 8003d56:	461c      	mov	r4, r3
 8003d58:	4615      	mov	r5, r2
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	022b      	lsls	r3, r5, #8
 8003d64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d68:	0222      	lsls	r2, r4, #8
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	6849      	ldr	r1, [r1, #4]
 8003d6e:	0849      	lsrs	r1, r1, #1
 8003d70:	2000      	movs	r0, #0
 8003d72:	4688      	mov	r8, r1
 8003d74:	4681      	mov	r9, r0
 8003d76:	eb12 0a08 	adds.w	sl, r2, r8
 8003d7a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d8c:	4650      	mov	r0, sl
 8003d8e:	4659      	mov	r1, fp
 8003d90:	f7fc fa1a 	bl	80001c8 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da2:	d308      	bcc.n	8003db6 <UART_SetConfig+0x3de>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003daa:	d204      	bcs.n	8003db6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	e0b6      	b.n	8003f24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dbc:	e0b2      	b.n	8003f24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc6:	d15e      	bne.n	8003e86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d828      	bhi.n	8003e22 <UART_SetConfig+0x44a>
 8003dd0:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <UART_SetConfig+0x400>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	08003e0d 	.word	0x08003e0d
 8003de4:	08003e23 	.word	0x08003e23
 8003de8:	08003e13 	.word	0x08003e13
 8003dec:	08003e23 	.word	0x08003e23
 8003df0:	08003e23 	.word	0x08003e23
 8003df4:	08003e23 	.word	0x08003e23
 8003df8:	08003e1b 	.word	0x08003e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f7ff f856 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8003e00:	61f8      	str	r0, [r7, #28]
        break;
 8003e02:	e014      	b.n	8003e2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7ff f868 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003e08:	61f8      	str	r0, [r7, #28]
        break;
 8003e0a:	e010      	b.n	8003e2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0c:	4b4d      	ldr	r3, [pc, #308]	; (8003f44 <UART_SetConfig+0x56c>)
 8003e0e:	61fb      	str	r3, [r7, #28]
        break;
 8003e10:	e00d      	b.n	8003e2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e12:	f7fe ffb3 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8003e16:	61f8      	str	r0, [r7, #28]
        break;
 8003e18:	e009      	b.n	8003e2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1e:	61fb      	str	r3, [r7, #28]
        break;
 8003e20:	e005      	b.n	8003e2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d077      	beq.n	8003f24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	005a      	lsls	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	441a      	add	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d916      	bls.n	8003e7e <UART_SetConfig+0x4a6>
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e56:	d212      	bcs.n	8003e7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f023 030f 	bic.w	r3, r3, #15
 8003e60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	8afb      	ldrh	r3, [r7, #22]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	8afa      	ldrh	r2, [r7, #22]
 8003e7a:	60da      	str	r2, [r3, #12]
 8003e7c:	e052      	b.n	8003f24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e84:	e04e      	b.n	8003f24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d827      	bhi.n	8003ede <UART_SetConfig+0x506>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x4bc>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003eb9 	.word	0x08003eb9
 8003e98:	08003ec1 	.word	0x08003ec1
 8003e9c:	08003ec9 	.word	0x08003ec9
 8003ea0:	08003edf 	.word	0x08003edf
 8003ea4:	08003ecf 	.word	0x08003ecf
 8003ea8:	08003edf 	.word	0x08003edf
 8003eac:	08003edf 	.word	0x08003edf
 8003eb0:	08003edf 	.word	0x08003edf
 8003eb4:	08003ed7 	.word	0x08003ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe fff8 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8003ebc:	61f8      	str	r0, [r7, #28]
        break;
 8003ebe:	e014      	b.n	8003eea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec0:	f7ff f80a 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003ec4:	61f8      	str	r0, [r7, #28]
        break;
 8003ec6:	e010      	b.n	8003eea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <UART_SetConfig+0x56c>)
 8003eca:	61fb      	str	r3, [r7, #28]
        break;
 8003ecc:	e00d      	b.n	8003eea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ece:	f7fe ff55 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8003ed2:	61f8      	str	r0, [r7, #28]
        break;
 8003ed4:	e009      	b.n	8003eea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eda:	61fb      	str	r3, [r7, #28]
        break;
 8003edc:	e005      	b.n	8003eea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ee8:	bf00      	nop
    }

    if (pclk != 0U)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d019      	beq.n	8003f24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	085a      	lsrs	r2, r3, #1
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	441a      	add	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	d909      	bls.n	8003f1e <UART_SetConfig+0x546>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d205      	bcs.n	8003f1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e002      	b.n	8003f24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3728      	adds	r7, #40	; 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3e:	bf00      	nop
 8003f40:	40008000 	.word	0x40008000
 8003f44:	00f42400 	.word	0x00f42400

08003f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d10a      	bne.n	800405e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b098      	sub	sp, #96	; 0x60
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800409c:	f7fc fdbc 	bl	8000c18 <HAL_GetTick>
 80040a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d12e      	bne.n	800410e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f88c 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d021      	beq.n	800410e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040de:	653b      	str	r3, [r7, #80]	; 0x50
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e062      	b.n	80041d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d149      	bne.n	80041b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f856 	bl	80041dc <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03c      	beq.n	80041b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	623b      	str	r3, [r7, #32]
   return(result);
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
 8004156:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800415a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e6      	bne.n	8004136 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3308      	adds	r3, #8
 800416e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60fb      	str	r3, [r7, #12]
   return(result);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3308      	adds	r3, #8
 8004186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004188:	61fa      	str	r2, [r7, #28]
 800418a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	617b      	str	r3, [r7, #20]
   return(result);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e5      	bne.n	8004168 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e011      	b.n	80041d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3758      	adds	r7, #88	; 0x58
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ec:	e049      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d045      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fc fd0f 	bl	8000c18 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <UART_WaitOnFlagUntilTimeout+0x30>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e048      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d031      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b08      	cmp	r3, #8
 800422a:	d110      	bne.n	800424e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2208      	movs	r2, #8
 8004232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f838 	bl	80042aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2208      	movs	r2, #8
 800423e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e029      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425c:	d111      	bne.n	8004282 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f81e 	bl	80042aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e00f      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	429a      	cmp	r2, r3
 800429e:	d0a6      	beq.n	80041ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b095      	sub	sp, #84	; 0x54
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	643b      	str	r3, [r7, #64]	; 0x40
 80042d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e6      	bne.n	80042b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3308      	adds	r3, #8
 80042ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800430a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e5      	bne.n	80042e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431c:	2b01      	cmp	r3, #1
 800431e:	d118      	bne.n	8004352 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	60bb      	str	r3, [r7, #8]
   return(result);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f023 0310 	bic.w	r3, r3, #16
 8004334:	647b      	str	r3, [r7, #68]	; 0x44
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6979      	ldr	r1, [r7, #20]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	613b      	str	r3, [r7, #16]
   return(result);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e6      	bne.n	8004320 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004366:	bf00      	nop
 8004368:	3754      	adds	r7, #84	; 0x54
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <memset>:
 8004372:	4402      	add	r2, r0
 8004374:	4603      	mov	r3, r0
 8004376:	4293      	cmp	r3, r2
 8004378:	d100      	bne.n	800437c <memset+0xa>
 800437a:	4770      	bx	lr
 800437c:	f803 1b01 	strb.w	r1, [r3], #1
 8004380:	e7f9      	b.n	8004376 <memset+0x4>
	...

08004384 <__libc_init_array>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	4d0d      	ldr	r5, [pc, #52]	; (80043bc <__libc_init_array+0x38>)
 8004388:	4c0d      	ldr	r4, [pc, #52]	; (80043c0 <__libc_init_array+0x3c>)
 800438a:	1b64      	subs	r4, r4, r5
 800438c:	10a4      	asrs	r4, r4, #2
 800438e:	2600      	movs	r6, #0
 8004390:	42a6      	cmp	r6, r4
 8004392:	d109      	bne.n	80043a8 <__libc_init_array+0x24>
 8004394:	4d0b      	ldr	r5, [pc, #44]	; (80043c4 <__libc_init_array+0x40>)
 8004396:	4c0c      	ldr	r4, [pc, #48]	; (80043c8 <__libc_init_array+0x44>)
 8004398:	f000 f818 	bl	80043cc <_init>
 800439c:	1b64      	subs	r4, r4, r5
 800439e:	10a4      	asrs	r4, r4, #2
 80043a0:	2600      	movs	r6, #0
 80043a2:	42a6      	cmp	r6, r4
 80043a4:	d105      	bne.n	80043b2 <__libc_init_array+0x2e>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ac:	4798      	blx	r3
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7ee      	b.n	8004390 <__libc_init_array+0xc>
 80043b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b6:	4798      	blx	r3
 80043b8:	3601      	adds	r6, #1
 80043ba:	e7f2      	b.n	80043a2 <__libc_init_array+0x1e>
 80043bc:	08004434 	.word	0x08004434
 80043c0:	08004434 	.word	0x08004434
 80043c4:	08004434 	.word	0x08004434
 80043c8:	08004438 	.word	0x08004438

080043cc <_init>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr

080043d8 <_fini>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	bf00      	nop
 80043dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043de:	bc08      	pop	{r3}
 80043e0:	469e      	mov	lr, r3
 80043e2:	4770      	bx	lr
